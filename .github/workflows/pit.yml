name: PiT
run-name: PiT ${{ inputs.version }} (lin=${{inputs.linux}} win=${{inputs.windows}} skip=${{inputs.skipcurrent}}) ${{inputs.starters}}
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        required: false
        type: string
      starters:
        description: 'Starters to run, separated by comma'
        required: false
        type: string
      skipcurrent:
        description: 'Skip running tests in current version'
        required: false
        type: boolean
        default: false
      skipdev:
        description: 'Skip running tests in dev mode'
        required: false
        type: boolean
        default: false
      debug:
        description: 'Be verbose when running PiT steps'
        required: false
        type: boolean
        default: false
      linux:
        description: 'Run build in linux runner'
        required: false
        type: boolean
        default: true
      windows:
        description: 'Run build in windows runner'
        required: false
        type: boolean
        default: false
      generated:
        description: 'Generate and run all supported start presets and archetypes'
        required: false
        type: boolean
        default: false
      demos:
        description: 'Checkout and run all demos'
        required: false
        type: boolean
        default: false
      join:
        description: 'Number of apps to run per container (default 1)'
        required: false
        type: choice
        options: ["1", "2", "3", "4"]
        default: "1"
jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set.outputs.matrix }}
    steps:
      - name: Compute Matrix
        id: set
        shell: bash
        run: |
          [ -z "${{secrets.GHTK}}" ] && exit 1
          curl -s -H "Authorization: Bearer ${{secrets.GHTK}}" https://api.github.com/repos/vaadin/platform | jq '.permissions'  | grep -q '"pull": true' || exit 1

          V="${{inputs.version}}"
          [ -n "$V" ] && echo "$V" | grep -Eqv '^[0-9]+(\.[0-9]+)*(-SNAPSHOT|\.alpha[0-9]+|\.beta[0-9]+|\.rc[0-9]+)?$' && echo "Invalid version" >&2 && exit 1

          git clone -q https://github.com/vaadin/platform-in-test-script.git pit
          W="${{inputs.windows}}"
          L="${{inputs.linux}}"
          [ true != "$W" -a true != "$L" ] && W=true
          [ true != "$L" -a true != "$W" ] && L=true
          A="$A --starters=${{inputs.starters}}"
          [ true = "${{inputs.generated}}" ] && A="$A --generated"
          [ true = "${{inputs.demos}}" ] && A="$A --demos"
          cmd="./pit/scripts/pit/run.sh $A --list=${{inputs.join}}"
          echo "Generating list of starters: $cmd"
          S=`eval $cmd`
          M='{"include":['
          for i in `echo $S`; do
            J='{"app":"'$i'"'
            [ -n "$V" ] && J=$J',"version":"'$V'"'
            [ true = "$W" -a control-center != "$i" ] && M=$M$J',"os":"windows-latest"},'
            [ true = "$L" ] && M=$M$J',"os":"ubuntu-22.04"},'
          done
          M=`echo $M | sed -e s/,$//`']}'
          echo "Generated Matrix: $M"
          echo "matrix=$M" >> $GITHUB_OUTPUT
          rm -rf pit
  run:
    needs: prepare
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
    runs-on: ${{matrix.os}}
    services:
      docker:
        image: ${{ (matrix.app == 'control-center' ) && 'docker:dind' || '' }}
        options: --privileged --shm-size=2g
    steps:
      - name: Check parameters
        shell: bash
        run: |
          [ -n "${{matrix.app}}" ] && echo "RUNNING TEST FOR ${{matrix.app}} APP" || exit 1
      - name: Setup ACT local runner
        if: ${{ env.ACT }}
        shell: bash
        run: |
          command -v sudo >/dev/null 2>&1 && S=sudo || S=
          $S apt-get update -qq
          $S apt-get install -qq -y vim iputils-ping curl git sudo unzip >/dev/null
      - name: Install PiT
        shell: bash
        run: |
          git clone -q https://github.com/vaadin/platform-in-test-script.git pit
          cd pit && git rev-parse --short HEAD
      - name: Install Licenses
        shell: bash
        run: |
          mkdir -p ~/.vaadin/
          echo '{"username":"'`echo ${{secrets.TB_LICENSE}} | cut -d / -f1`'","proKey":"'`echo ${{secrets.TB_LICENSE}} | cut -d / -f2`'"}' > ~/.vaadin/proKey
          echo "${{secrets.SS_LICENSE}}" > ~/vaadin.spreadsheet.developer.license
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - uses: stCarolas/setup-maven@v5
        with:
          maven-version: '3.9.0'
      - name: Set up Helm
        if: ${{ matrix.app == 'control-center' }}
        uses: azure/setup-helm@v3.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create k8s Kind Cluster
        if: ${{ matrix.app == 'control-center' }}
        uses: helm/kind-action@v1
        with:
          cluster_name: pit
      - name: Setup ACT vars
        if: ${{ env.ACT }}
        shell: bash
        run: |
          echo "PATH=$PATH" >> vars.sh
      - name: Run PiT ${{matrix.app}} ${{inputs.version}}
        shell: bash
        run: |
          echo "${{toJSON(inputs)}}"
          [ -n "${{inputs.version}}" ] && ARG="--version=${{inputs.version}}"
          [ true = "${{inputs.skipcurrent}}" ] && ARG="$ARG --skip-current"
          [ true = "${{inputs.skipdev}}" ] && ARG="$ARG --skip-dev"
          [ true = "${{inputs.debug}}" ] && ARG="$ARG --debug"
          CMD="./pit/scripts/pit/run.sh $ARG --starters=${{matrix.app}} --ghtk=${{secrets.GHTK}}"
          echo "$CMD"
          $CMD
        env:
          OPENAI_TOKEN: ${{secrets.OPENAI_TOKEN}}
          MAVEN_ARGS: ${{env.MAVEN_ARGS}}
          CC_CERT: ${{secrets.CC_CERT}}
          CC_KEY: ${{secrets.CC_KEY}}
      - name: ACT Wait
        if: ${{ always() && env.ACT }}
        run: |
          echo "Keeping docker container running, push Ctrl-C to terminate ..."
          read key
      - if: ${{failure()}}
        run: echo artifact_name=`echo failed-outputs-${{matrix.app}} | sed -e 's/[^a-zA-Z0-9._-]/_/g'` >> $GITHUB_ENV
        shell: bash
      - if: ${{failure()}}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact_name }}
          path: tmp/**/*.out
          if-no-files-found: ignore
          retention-days: 7
