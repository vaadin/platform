name: PiT
on:
  push:
    paths: [".github/workflows/pit.yml"]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        required: false
        type: string
      starter:
        description: 'Starters to run, separated by comma'
        required: false
        type: string
      skipcurrent:
        description: 'Skip running tests in current version'
        required: false
        type: boolean
        default: false
      debug:
        description: 'Show build and test outputs'
        required: false
        type: boolean
        default: false
jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set.outputs.matrix }}
    steps:
      - id: set
        run: |
          # COMPUTE
          [ -z "${{secrets.GHTK}}" -o -z "${{secrets.TB_LICENSE}}" ] && exit 1
          git clone -q https://${{secrets.GHTK}}@github.com/vaadin/platform-in-test-script.git pit
          S="${{github.event.inputs.starter}}"
          [ -z "$S" ] && S=`./pit/scripts/pit/run.sh --list`
          M='{"include":['
          for i in `echo $S | tr "," " "`; do
            M=$M'{"current":"'$i'"},'
          done
          M=`echo $M | sed -e s/,$//`']}'
          echo "$M"
          echo "::set-output name=matrix::$M"
  run:
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
    steps:
      - run: |
          # TEST PARAMETERS
          [ -z "${{matrix.current}}" ] && exit 1
          echo "RUNNING TEST FOR ${{matrix.current}} APP"
      - run: |
          # INSTALL PIT
          git clone https://${{secrets.GHTK}}@github.com/vaadin/platform-in-test-script.git pit
      - run: |
          # INSTALL LICENSE
          mkdir -p ~/.vaadin/
          echo '{"username":"'`echo ${{secrets.TB_LICENSE}} | cut -d / -f1`'","proKey":"'`echo ${{secrets.TB_LICENSE}} | cut -d / -f2`'"}' > ~/.vaadin/proKey
      - run: |
          # INSTALL SYSTEM PACKAGES
          sudo bash pit/scripts/pit/docker/setup.sh
      - run: |
          # PIT TESTS ${{matrix.current}} ${{github.event.inputs.version}}
          [ -n "${{github.event.inputs.version}}" ] && ARG="--version=${{github.event.inputs.version}}"
          [ true = "${{github.event.inputs.skipcurrent}}" ] && ARG="$ARG --skip-current"
          [ true = "${{github.event.inputs.debug}}" ] && ARG="$ARG --debug"
          echo ./pit/scripts/pit/run.sh $ARG --starters=${{matrix.current}}
          ./pit/scripts/pit/run.sh $ARG --starters=${{matrix.current}}
      - if: ${{failure()}}
        uses: actions/upload-artifact@v2.2.0
        with:
          name: failed-outputs
          path: tmp/**/*.out
          if-no-files-found: error
          retention-days: 7
          
