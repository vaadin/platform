buildscript {
    repositories {
        mavenLocal()
        maven { setUrl("https://maven.vaadin.com/vaadin-prereleases") }
    }
    dependencies {
        classpath group: 'com.vaadin',
                name: 'vaadin-gradle-plugin',
                version: "$pluginVersion"

        classpath 'org.gebish:geb-gradle:5.0-milestone-2'
    }
}

plugins {
    id 'war'
    id 'org.gretty' version '3.0.4'
    id "com.saucelabs.SauceConnectPlugin" version "0.0.12"
}

apply plugin: "com.vaadin"
apply plugin: "geb-saucelabs"

defaultTasks("clean", "build")

repositories {
    mavenLocal()
    maven { setUrl("https://maven.vaadin.com/vaadin-prereleases") }
    mavenCentral()
    jcenter()
}

def enableSauce = project.hasProperty('enableSauce')

gretty {
    contextPath = "/"
    httpPort = 8080
    servletContainer = "jetty9.4"
    integrationTestTask = enableSauce ? 'integrationTestSauce' : 'integrationTest'
}

dependencies {
    // Vaadin
    implementation enforcedPlatform("com.vaadin:vaadin-bom:$vaadinVersion")
    implementation "com.vaadin:vaadin-core"
    testImplementation "com.vaadin:vaadin-testbench"

    providedCompile "javax.servlet:javax.servlet-api:3.1.0"

    // logging
    // currently we are logging through the SLF4J API to SLF4J-Simple. See src/main/resources/simplelogger.properties file for the logger configuration
    implementation "org.slf4j:slf4j-simple:1.7.30"

    testImplementation 'junit:junit:4.13'
    testImplementation 'io.github.bonigarcia:webdrivermanager:4.4.0'
    // Download automatically chrome driver when running tests in local
    testImplementation 'io.github.bonigarcia:webdrivermanager:LATEST'

    sauceConnect "com.saucelabs:ci-sauce:1.151"
}

def testsInParallel = project.hasProperty('testsInParallel') ? project.getProperty('testsInParallel') : 1

task integrationTest(type: Test) {
    description = 'Runs Integration Tests.'
    group = 'verification'

    systemProperties 'com.vaadin.testbench.Parameters.testsInParallel' : "$testsInParallel"

    systemProperties 'test.use.hub' :  project.hasProperty('test.use.hub') ? project.getProperty('test.use.hub') : 'false'

    systemProperties 'java.net.preferIPv4Stack' : 'true'

    if(project.hasProperty('vaadin.testbench.developer.license')) {
        systemProperties 'vaadin.testbench.developer.license' : project.getProperty('vaadin.testbench.developer.license')
    }
    if(project.hasProperty('com.vaadin.testbench.Parameters.hubHostname')) {
        systemProperties 'com.vaadin.testbench.Parameters.hubHostname' : project.getProperty('com.vaadin.testbench.Parameters.hubHostname')
    }

    useJUnit()

    maxHeapSize = '1G'
    filter {
        includeTestsMatching('*IT*')
    }

    mustRunAfter test

    testLogging {
        showStandardStreams = true
    }
}

sauceAuth {
    username = enableSauce ? "${System.env.SAUCE_USERNAME}" : ""
    key = enableSauce ? "$System.env.SAUCE_ACCESS_KEY" : ""
}

def timestamp = System.currentTimeMillis()

def sauce = [
        username: sauceAuth.username,
        key     : sauceAuth.key,
        options : "--tunnel-identifier $timestamp"
]

sauceLabs {
    account {
        username = sauce.username
        accessKey = sauce.key
    }
}

 test {
     filter {
        excludeTestsMatching "*IT"
        setFailOnNoMatchingTests(false)
     }
 }

task integrationTestSauce(dependsOn: startSauceConnect, type: Test) {
    description = 'Runs Integration Tests.'
    group = 'verification'

    systemProperties 'com.vaadin.testbench.Parameters.testsInParallel' : "$testsInParallel"
    // systemProperties 'enforcer.skip' : 'true'

    systemProperties 'test.use.hub' :  project.hasProperty('test.use.hub') ? project.getProperty('test.use.hub') : 'false'

    if(project.hasProperty('vaadin.testbench.developer.license')) {
        systemProperties 'vaadin.testbench.developer.license' : project.getProperty('vaadin.testbench.developer.license')
    }
    if(project.hasProperty('com.vaadin.testbench.Parameters.hubHostname')) {
        systemProperties 'com.vaadin.testbench.Parameters.hubHostname' : project.getProperty('com.vaadin.testbench.Parameters.hubHostname')
    }

    useJUnit()

    maxHeapSize = '1G'
    filter {
        includeTestsMatching('*IT*')
    }

    systemProperties 'sauce.user' : sauce.username
    systemProperties 'sauce.sauceAccessKey' : sauce.key
    systemProperties 'sauce.options' : sauce.options
    systemProperties 'testDriver' : 'sauce'
    systemProperties 'java.net.preferIPv4Stack' : 'true'

    mustRunAfter test

    testLogging {
        showStandardStreams = true
    }
}
integrationTestSauce.finalizedBy stopSauceConnect

check.dependsOn project.hasProperty('enableSauce') ? integrationTestSauce : integrationTest
